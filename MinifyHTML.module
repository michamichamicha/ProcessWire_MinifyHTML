<?php

/**
 * ProcessWire 'MinifyHTML' module
 *
 * Minify your HTML output for speed.
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class MinifyHTML extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'MinifyHTML', 

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 101, 

			// summary is brief description of what this module is
			'summary' => 'Minify your HTML output for all pages.',
			
			// Optional URL to more information about the module
			'href' => 'https://github.com/michamichamicha/ProcessWire_MinifyHTML',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

		// add a hook after each page is rendered and modify the output
		$this->addHookAfter('Page::render', $this, 'minifyOutput'); 

	}



	public function minifyOutput($event) {

		// don't process the admin pages
		if($event->object->template == 'admin') return;


    	$search = array(
        	'/\>[^\S ]+/s', //strip whitespaces after tags, except space
	        '/[^\S ]+\</s', //strip whitespaces before tags, except space
			'/(\s)+/s',  // shorten multiple whitespace sequences
			'/<!--[^>]*-->/s'  // comment string
   	     	);
    	$replace = array(
			'>',
			'<',
			'\\1',
			''
			);
		$event->return = preg_replace($search, $replace, $event->return);

	}
	
}
